/// <reference types="node" />
import { EventEmitter } from 'events';
import { Message, MessageData, Post, PostData, Profile, Stream } from '../model';
import { Credentials, SDK } from '../sdk';
/**
 * Interface for ChatBots
 */
export interface ChatBot extends EventEmitter {
    /**
     * Utilized SDK instance
     */
    sdk: SDK;
    /**
     * Starts the bot. Listen for events with `.on()`.
     */
    start(): void;
    /**
     * Stop listening for events.
     */
    stop(): void;
    /**
     * @returns {Promise<Profile>} resolves with profile of ChatBot
     */
    getMe(): Promise<Profile>;
    /**
     * Sends a text messsage to a profile
     * @returns {Promise<Message>} resolves with sent message
     */
    message(recipient: Profile, messageData: MessageData): Promise<Message>;
    /**
     * Creates a new post in a stream with title and text
     * @param stream {Stream} to send the new post in
     */
    post(stream: Stream, postData: PostData): Promise<Post>;
}
/**
 * A ChatBot implementation to interact with the SDK
 * @implements ChatBot
 */
export declare class ChatBotImpl extends EventEmitter implements ChatBot {
    private _keepAliveTimeout;
    /**
     * Accessible sdk
     */
    sdk: SDK;
    /**
     * Constructs a new chat bot from a SDK
     * @param sdk
     */
    constructor(sdk: SDK);
    /**
     * Creates and returns a new chat bot instance from a passed SDK.
     * To work correctly, the SDK needs to have realtime communication enabled.
     * @param sdk to be used by the chat bot
     * @returns a chat bot instance
     */
    static withSDK(sdk: SDK): ChatBot;
    /**
     * Creates and returns a new chat bot instance based on the credentials
     * @param credentials to be used for the SDK of the chat bot
     * @returns a new chat bot
     */
    static withCredentials(credentials: Credentials): ChatBot;
    private messageHandler;
    private attachListeners;
    start(): void;
    stop(): void;
    getMe(): Promise<Profile>;
    message(user: Profile, messageData: MessageData): Promise<Message>;
    post(stream: Stream, postData: PostData): Promise<Post>;
}
