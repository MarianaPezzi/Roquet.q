/**
 * A simple interface
 */
export interface Identifier {
    /**
     * @param {Identifier} other to compare with
     * @returns {boolean} true if same otherwise false
     */
    isSame(other: Identifier): boolean;
}
/**
 * A basic identifier implementing Identifier interface and accepting a type.
 * @implements Identifier
 */
export declare class BasicIdentifier<T> implements Identifier {
    private _value;
    /**
     * @param {T} val of the identification data
     */
    constructor(val: T);
    isSame(other: BasicIdentifier<T>): boolean;
    /**
     * @returns {T} value of the identifier
     */
    get value(): T;
    /**
     * Returns a stringified version of the identifier
     */
    toString(): string;
    /**
     * Returns JSON value of the identifier
     */
    toJSON(): T;
}
/** A number based basic identifier representing ID identifiers */
export declare class NumericIdentifier extends BasicIdentifier<number> {
}
/** A string based basic identifier representing UUID identifiers  */
export declare class UUIDIdentifier extends BasicIdentifier<string> {
}
/** A string based basic identifier representing usernames */
export declare class UsernameIdentifier extends BasicIdentifier<string> {
}
