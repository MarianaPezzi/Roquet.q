"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toUserFull = exports.toUser = exports.UserRole = void 0;
const identifier_1 = require("./identifier");
const photo_1 = require("./photo");
const timestamp_1 = require("./timestamp");
/**
 * A role of a user
 */
var UserRole;
(function (UserRole) {
    UserRole["ADMIN"] = "admin";
    UserRole["MEMBER"] = "member";
})(UserRole = exports.UserRole || (exports.UserRole = {}));
// tslint:disable-next-line no-any
function toUser(data) {
    let avatarVersions;
    if (data.avatar_versions) {
        avatarVersions = photo_1.toPhoto(data.avatar_versions);
    }
    else {
        avatarVersions = {};
    }
    return Object.assign({}, data, {
        avatar_versions: avatarVersions,
        id: new identifier_1.UUIDIdentifier(data.id),
        name: data.name ? new identifier_1.UsernameIdentifier(data.name) : undefined,
        profile: data.profile
            ? new identifier_1.UsernameIdentifier(data.profile)
            : undefined,
        created: data.accepted_coc
            ? timestamp_1.parseTimestamp(data.accepted_coc)
            : undefined,
    });
}
exports.toUser = toUser;
// tslint:disable-next-line no-any
function toUserFull(data) {
    const user = toUser(data);
    const streamid = data.streamid
        ? new identifier_1.NumericIdentifier(data.streamid)
        : undefined;
    return Object.assign({}, data, user, {
        streamid,
        tenant_id: new identifier_1.NumericIdentifier(data.tenant_id),
        updated: data.updated ? timestamp_1.parseTimestamp(data.updated) : undefined,
        last_login: data.last_login
            ? timestamp_1.parseTimestamp(data.last_login)
            : undefined,
        suspended_at: data.suspended_at
            ? timestamp_1.parseTimestamp(data.suspended_at)
            : undefined,
        accepted_coc: data.accepted_coc
            ? timestamp_1.parseTimestamp(data.accepted_coc)
            : undefined,
    });
}
exports.toUserFull = toUserFull;
