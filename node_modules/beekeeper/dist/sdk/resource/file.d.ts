import { File, FileData } from '../../model';
import { Resource } from './resource';
interface FileUploadProgress {
    done: number;
    total: number;
}
declare type ProgressHandler = (progress: FileUploadProgress) => void;
export interface FileResource {
    create(metadata: FileData, body: any, onUploadProgress?: ProgressHandler): Promise<File>;
}
export declare class FileResourceImpl extends Resource implements FileResource {
    /**
     * Upload the given file to Beekeeper.
     *
     * @param metadata Metadata about the file
     * @param body The file's contents. In Browsers, `Blob`s and `File`s are accepted. On Node.js, you can pass
     *             `Buffer`s and `OutputStream`s as file body.
     * @param onUploadProgress Callback that gets called upon progress.
     */
    create(metadata: FileData, body: any, onUploadProgress?: ProgressHandler): Promise<File>;
    private getToken;
    private registerFile;
    private uploadFile;
}
export {};
