"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resource = exports.Methods = void 0;
const debug_1 = __importDefault(require("debug"));
const header_1 = require("../header");
const fetch_1 = require("./fetch");
const error_1 = __importDefault(require("./error"));
const debug = debug_1.default('beekeeper:resource');
var Methods;
(function (Methods) {
    Methods["GET"] = "GET";
    Methods["POST"] = "POST";
    Methods["PUT"] = "PUT";
    Methods["DELETE"] = "DELETE";
})(Methods = exports.Methods || (exports.Methods = {}));
class Resource {
    constructor(path, headers) {
        this._defaultHeaders = [];
        this._basePath = path;
        if (headers) {
            this._defaultHeaders = headers;
        }
    }
    // tslint:disable-next-line no-any
    async request(request) {
        let headers = this._defaultHeaders;
        const hasRequestBody = request.body !== undefined;
        if (hasRequestBody) {
            headers = headers.concat(new header_1.Header('Content-Type', 'application/json'));
        }
        if (request.headers) {
            headers = headers.concat(request.headers);
        }
        const url = this.makeURL(request.path, request.query);
        debug(`Making ${request.method} request to ${url}`);
        const response = await this.fetch(url, {
            headers: header_1.headersToObject(headers),
            method: request.method,
            body: hasRequestBody ? JSON.stringify(request.body) : undefined,
        });
        if (!response.ok) {
            throw await error_1.default.fromResponse(response);
        }
        const text = await response.text();
        return text ? JSON.parse(text) : {};
    }
    makeURL(path, queryObject) {
        const url = new URL(path, this._basePath);
        if (queryObject) {
            url.search = Resource.makeQuery(queryObject);
        }
        return url.href;
    }
    static makeQuery(queryObject) {
        const searchParams = new fetch_1.URLSearchParams();
        for (let [key, value] of Object.entries(queryObject)) {
            searchParams.append(key, value.toString());
        }
        return searchParams.toString();
    }
    get fetch() {
        return fetch_1.isomorphicFetch;
    }
    get basePath() {
        return this._basePath;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
}
exports.Resource = Resource;
