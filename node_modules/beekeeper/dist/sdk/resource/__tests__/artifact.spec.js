"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const url_1 = __importDefault(require("url"));
const artifactsWithExpandChildrenParam = __importStar(require("./__fixtures__/artifactsWithExpandChildrenParam.json"));
const artifactsWithoutExpandChildrenParam = __importStar(require("./__fixtures__/artifactsWithoutExpandChildrenParam.json"));
const artifactsWithVisibilityManageParam = __importStar(require("./__fixtures__/artifactsWithVisibilityManageParam.json"));
const aclData = __importStar(require("./__fixtures__/acl.json"));
const artifact_1 = require("../artifact");
const mockedFetch = window.fetch;
describe('ArtifactResource', () => {
    const baseURL = 'https://tenant.beekeeper.rocks';
    let resource;
    const artifactBody = {
        type: 'file',
        name: 'test',
        metadata: {
            mimeType: 'image/png',
            url: 'https://tenant.beekeeper.rocks/',
            userId: '3b776367-6057-4d36-a0d1-1ada402df98d',
            size: 12345,
        },
    };
    const aclBody = {
        resourceType: 'artifacts',
        resourceId: 'resource_id',
        granted: [
            {
                role: 'artifact.read',
                resourceType: 'artifact',
                resourceId: 'resource_id',
                actor: {
                    role: 'tenant.member',
                    resourceType: 'group',
                    resourceId: 'resource_id',
                },
            },
        ],
    };
    beforeEach(() => {
        resource = new artifact_1.ArtifactResourceImpl(baseURL);
    });
    afterEach(() => {
        mockedFetch.mockClear();
    });
    describe('.get()', () => {
        test('returns the root artifact from API', async () => {
            var _a;
            const artifactsQuery = new artifact_1.QueryParams();
            artifactsQuery.expand = 'children';
            mockedFetch.mockResolvedValueOnce(new node_fetch_1.Response(JSON.stringify(artifactsWithExpandChildrenParam)));
            const actual = await resource.get(artifactsQuery);
            expect(actual.children).toHaveLength(2);
            (_a = actual.children) === null || _a === void 0 ? void 0 : _a.map((child) => {
                expect(child.hasOwnProperty('id')).toBe(true);
            });
        });
        test('calls with serialized filter', async () => {
            const artifactsQuery = new artifact_1.QueryParams();
            artifactsQuery.expand = 'children';
            artifactsQuery.visibility = 'manage';
            mockedFetch.mockResolvedValue(new node_fetch_1.Response('[]'));
            await resource.get(artifactsQuery);
            expect(mockedFetch).toHaveBeenCalled();
            const [firstCall] = mockedFetch.mock.calls;
            const [urlString] = firstCall;
            const { query } = url_1.default.parse(urlString, true);
            const expectedQuery = {
                expand: 'children',
                visibility: 'manage',
            };
            expect(query).toEqual(expect.objectContaining(expectedQuery));
        });
        test('number of child artifacts, when optional query {expand: "children", visibility: "manage"}', async () => {
            const artifactsQuery = new artifact_1.QueryParams();
            artifactsQuery.expand = 'children';
            artifactsQuery.visibility = 'manage';
            mockedFetch.mockResolvedValueOnce(new node_fetch_1.Response(JSON.stringify(artifactsWithVisibilityManageParam)));
            const actual = await resource.get(artifactsQuery);
            expect(actual.children).toHaveLength(4);
        });
        test('number of child artifacts without {expand: "children"} param', async () => {
            const artifactsQuery = new artifact_1.QueryParams();
            artifactsQuery.expand = 'children';
            artifactsQuery.visibility = 'manage';
            mockedFetch.mockResolvedValueOnce(new node_fetch_1.Response(JSON.stringify(artifactsWithoutExpandChildrenParam)));
            const actual = await resource.get(artifactsQuery);
            expect(actual.children).toBe(null);
        });
    });
    describe('.getById()', () => {
        test('returns artifact from API', async () => {
            var _a;
            const artifactsQuery = new artifact_1.QueryParams();
            artifactsQuery.expand = 'children';
            mockedFetch.mockResolvedValueOnce(new node_fetch_1.Response(JSON.stringify(artifactsWithExpandChildrenParam)));
            const actual = await resource.getById('artifactId', artifactsQuery);
            expect(actual.children).toHaveLength(2);
            (_a = actual.children) === null || _a === void 0 ? void 0 : _a.map((child) => {
                expect(child.hasOwnProperty('id')).toBe(true);
            });
        });
        test('calls with serialized filter', async () => {
            const artifactsQuery = new artifact_1.QueryParams();
            artifactsQuery.expand = 'children';
            artifactsQuery.visibility = 'manage';
            mockedFetch.mockResolvedValue(new node_fetch_1.Response('[]'));
            await resource.getById('artifactId', artifactsQuery);
            expect(mockedFetch).toHaveBeenCalled();
            const [firstCall] = mockedFetch.mock.calls;
            const [urlString] = firstCall;
            const { query } = url_1.default.parse(urlString, true);
            const expectedQuery = {
                expand: 'children',
                visibility: 'manage',
            };
            expect(query).toEqual(expect.objectContaining(expectedQuery));
        });
    });
    describe('.getAclById()', () => {
        test('returns Acl from API', async () => {
            mockedFetch.mockResolvedValueOnce(new node_fetch_1.Response(JSON.stringify(aclData)));
            const actual = await resource.getAclById('artifactId');
            expect(actual.granted).toHaveLength(1);
            expect(actual.hasOwnProperty('resourceId')).toBe(true);
        });
    });
    describe('.create()', () => {
        test('calls with serialized filter and body', async () => {
            var _a, _b;
            const artifactsQuery = new artifact_1.QueryParams();
            artifactsQuery.expand = 'children';
            mockedFetch.mockResolvedValue(new node_fetch_1.Response('[]'));
            await resource.create('artifactId', artifactBody, artifactsQuery);
            expect(mockedFetch).toHaveBeenCalled();
            const [firstCall] = mockedFetch.mock.calls;
            const [urlString] = firstCall;
            const actualBody = JSON.parse(((_b = (_a = firstCall[1]) === null || _a === void 0 ? void 0 : _a.body) === null || _b === void 0 ? void 0 : _b.toString()) || '');
            const { query } = url_1.default.parse(urlString, true);
            const expectedQuery = {
                expand: 'children',
            };
            expect(query).toEqual(expect.objectContaining(expectedQuery));
            expect(actualBody).toEqual(artifactBody);
        });
    });
    describe('.update()', () => {
        test('calls with serialized filter and body', async () => {
            var _a, _b;
            const artifactsQuery = new artifact_1.QueryParams();
            artifactsQuery.expand = 'children';
            mockedFetch.mockResolvedValue(new node_fetch_1.Response('[]'));
            await resource.update('artifactId', artifactBody, artifactsQuery);
            expect(mockedFetch).toHaveBeenCalled();
            const [firstCall] = mockedFetch.mock.calls;
            const [urlString] = firstCall;
            const actualBody = JSON.parse(((_b = (_a = firstCall[1]) === null || _a === void 0 ? void 0 : _a.body) === null || _b === void 0 ? void 0 : _b.toString()) || '');
            const { query } = url_1.default.parse(urlString, true);
            const expectedQuery = {
                expand: 'children',
            };
            expect(query).toEqual(expect.objectContaining(expectedQuery));
            expect(actualBody).toEqual(artifactBody);
        });
    });
    describe('.updateAcl()', () => {
        test('calls with correct body', async () => {
            var _a, _b;
            mockedFetch.mockResolvedValue(new node_fetch_1.Response('[]'));
            await resource.updateAcl('artifactId', aclBody);
            expect(mockedFetch).toHaveBeenCalled();
            const [firstCall] = mockedFetch.mock.calls;
            const actualBody = JSON.parse(((_b = (_a = firstCall[1]) === null || _a === void 0 ? void 0 : _a.body) === null || _b === void 0 ? void 0 : _b.toString()) || '');
            expect(actualBody).toEqual(aclBody);
        });
    });
    describe('.delete()', () => {
        test('calls with correct body', async () => {
            mockedFetch.mockResolvedValue(new node_fetch_1.Response('[]'));
            await resource.delete('artifactId');
            expect(mockedFetch).toHaveBeenCalled();
        });
    });
    describe('.list()', () => {
        test('makes request with serialized filter', async () => {
            const artifactsFilter = new artifact_1.ArtifactsFilter();
            artifactsFilter.limit = 1;
            artifactsFilter.type = 'file';
            artifactsFilter.sort = '+createdAt';
            mockedFetch.mockResolvedValue(new node_fetch_1.Response('[]'));
            await resource.list(artifactsFilter);
            expect(mockedFetch).toHaveBeenCalled();
            const [firstCall] = mockedFetch.mock.calls;
            const [urlString] = firstCall;
            const { query } = url_1.default.parse(urlString, true);
            const expectedQuery = {
                limit: '1',
                type: 'file',
                sort: '+createdAt',
            };
            expect(query).toEqual(expect.objectContaining(expectedQuery));
        });
    });
});
