"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const url_1 = __importDefault(require("url"));
const postsData = __importStar(require("./__fixtures__/posts.json"));
const post_1 = require("../post");
const mockedFetch = window.fetch;
describe('PostResource', () => {
    const baseURL = 'https://tenant.beekeeper.rocks';
    let resource;
    beforeEach(() => {
        resource = new post_1.PostResourceImpl(baseURL);
    });
    afterEach(() => {
        mockedFetch.mockClear();
    });
    describe('.list()', () => {
        test('returns list of posts from API', async () => {
            mockedFetch.mockResolvedValueOnce(new node_fetch_1.Response(JSON.stringify(postsData.body)));
            const actual = await resource.list();
            expect(actual).toHaveLength(2);
        });
        test('makes POST request to posts endpoint', async () => {
            mockedFetch.mockResolvedValue(new node_fetch_1.Response('[]'));
            await resource.list();
            const [firstCall] = mockedFetch.mock.calls;
            const [actualUrl] = firstCall;
            expect(actualUrl).toBe('https://tenant.beekeeper.rocks/api/2/posts');
        });
        test('makes POST request with serialized filter', async () => {
            const postsFilter = new post_1.PostsFilter();
            postsFilter.count = true;
            postsFilter.orderby = 'created';
            postsFilter.after = new Date('2020-11-26T14:23:06.840Z');
            postsFilter.filter = { sticky: true };
            postsFilter.limit = 3;
            postsFilter.before = new Date('2020-11-25T14:23:06.840Z');
            mockedFetch.mockResolvedValue(new node_fetch_1.Response('[]'));
            await resource.list(postsFilter);
            const [firstCall] = mockedFetch.mock.calls;
            const [urlString] = firstCall;
            const { query } = url_1.default.parse(urlString, true);
            const expectedQuery = {
                after: '2020-11-26T14:23:06.840Z',
                before: '2020-11-25T14:23:06.840Z',
                count: 'true',
                orderby: 'created',
                filter: '{"sticky":true}',
                limit: '3',
            };
            expect(query).toEqual(expect.objectContaining(expectedQuery));
        });
    });
});
