import { Identifier } from '../../model';
import { Header } from '../header';
declare type Serializable = string | boolean | number;
export interface Request {
    path: string;
    method: Methods;
    headers?: Header[];
    query?: Record<string, Serializable>;
    body?: any;
}
export declare enum Methods {
    GET = "GET",
    POST = "POST",
    PUT = "PUT",
    DELETE = "DELETE"
}
export interface Filter {
    readonly query?: Record<string, Serializable>;
    readonly limit?: number;
}
export interface Createable<T> {
    create(model: T): Promise<T>;
}
export interface Getable<T> {
    get(identifier?: Identifier): Promise<T>;
}
export interface Browseable<T> {
    list(filter?: Filter): Promise<T[]>;
}
export declare abstract class Resource {
    private _defaultHeaders;
    private _basePath;
    constructor(path: string, headers?: Header[]);
    protected request(request: Request): Promise<any>;
    makeURL(path: string, queryObject?: Record<string, Serializable>): string;
    private static makeQuery;
    get fetch(): typeof fetch;
    protected get basePath(): string;
    protected get defaultHeaders(): Header[];
}
export {};
