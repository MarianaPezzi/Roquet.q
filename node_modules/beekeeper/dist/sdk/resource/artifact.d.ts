import { Artifact, Acl } from '../../model/artifact';
import { Filter, Resource } from './resource';
export declare class QueryParams implements Filter {
    expand?: 'children' | 'breadcrumbs' | 'acl';
    visibility?: 'read' | 'manage';
    get query(): Record<string, any>;
}
export declare class ArtifactsFilter implements Filter {
    limit?: number;
    type?: 'file' | 'folder';
    sort?: '+name' | '-name' | '+createdAt' | '-createdAt' | '+updatedAt' | '-updatedAt';
    get query(): Record<string, any>;
}
export interface ArtifactResource extends Resource {
    delete(artifactId: string): Promise<Artifact>;
    getAclById(artifactId: string): Promise<Acl>;
    getById(artifactId: string, query?: QueryParams): Promise<Artifact>;
    update(artifactId: string, body: Artifact, query?: QueryParams): Promise<Artifact>;
    updateAcl(artifactId: string, body: Acl): Promise<Acl>;
    create(parentArtifactId: string, body: Artifact, query?: QueryParams): Promise<Artifact>;
    get(query?: QueryParams): Promise<Artifact>;
    list(filter?: Filter): Promise<Artifact[]>;
}
export declare class ArtifactResourceImpl extends Resource implements ArtifactResource {
    get(query?: QueryParams): Promise<Artifact>;
    getAclById(artifactId: string): Promise<Acl>;
    getById(artifactId: string, query: QueryParams): Promise<Artifact>;
    list(filter?: ArtifactsFilter): Promise<Artifact[]>;
    create(parentArtifactId: string, body: Artifact, query: QueryParams): Promise<Artifact>;
    delete(artifactId: string): Promise<Artifact>;
    update(artifactId: string, body: Artifact, query: QueryParams): Promise<Artifact>;
    updateAcl(artifactId: string, body: Acl): Promise<Acl>;
}
