"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtifactResourceImpl = exports.ArtifactsFilter = exports.QueryParams = void 0;
const artifact_1 = require("../../model/artifact");
const resource_1 = require("./resource");
const utils_1 = require("./utils");
class QueryParams {
    get query() {
        const query = {
            expand: this.expand,
            visibility: this.visibility,
        };
        return utils_1.trimNullableValues(query);
    }
}
exports.QueryParams = QueryParams;
class ArtifactsFilter {
    get query() {
        const query = {
            limit: this.limit,
            type: this.type,
            sort: this.sort,
        };
        return utils_1.trimNullableValues(query);
    }
}
exports.ArtifactsFilter = ArtifactsFilter;
const basePath = '/api/2/artifacts';
class ArtifactResourceImpl extends resource_1.Resource {
    async get(query) {
        const response = await this.request({
            path: basePath,
            method: resource_1.Methods.GET,
            query: query === null || query === void 0 ? void 0 : query.query,
        });
        return artifact_1.toArtifact(response);
    }
    async getAclById(artifactId) {
        const response = await this.request({
            path: `${basePath}/${artifactId}/acl`,
            method: resource_1.Methods.GET,
        });
        return artifact_1.toAcl(response);
    }
    async getById(artifactId, query) {
        const response = await this.request({
            path: `${basePath}/${artifactId}`,
            method: resource_1.Methods.GET,
            query: query === null || query === void 0 ? void 0 : query.query,
        });
        return artifact_1.toArtifact(response);
    }
    async list(filter) {
        const response = await this.request({
            path: `${basePath}/list`,
            method: resource_1.Methods.GET,
            query: filter === null || filter === void 0 ? void 0 : filter.query,
        });
        return response.map(artifact_1.toArtifact);
    }
    async create(parentArtifactId, body, query) {
        const response = await this.request({
            path: `${basePath}/${parentArtifactId}/children`,
            method: resource_1.Methods.POST,
            body: body,
            query: query === null || query === void 0 ? void 0 : query.query,
        });
        return artifact_1.toArtifact(response);
    }
    async delete(artifactId) {
        const response = await this.request({
            path: `${basePath}/${artifactId}`,
            method: resource_1.Methods.DELETE,
        });
        return artifact_1.toArtifact(response);
    }
    async update(artifactId, body, query) {
        const response = await this.request({
            path: `${basePath}/${artifactId}`,
            method: resource_1.Methods.PUT,
            body: body,
            query: query === null || query === void 0 ? void 0 : query.query,
        });
        return artifact_1.toArtifact(response);
    }
    async updateAcl(artifactId, body) {
        const response = await this.request({
            path: `${basePath}/${artifactId}/acl`,
            method: resource_1.Methods.PUT,
            body: body,
        });
        return artifact_1.toAcl(response);
    }
}
exports.ArtifactResourceImpl = ArtifactResourceImpl;
