"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDKImpl = exports.BeekeeperSDKException = exports.version = void 0;
const debug_1 = __importDefault(require("debug"));
const events_1 = require("events");
const realtime_1 = require("../realtime");
const header_1 = require("./header");
const resource_1 = require("./resource");
const resource_2 = require("./resource");
const resource_3 = require("./resource");
const resource_4 = require("./resource");
const resource_5 = require("./resource");
const resource_6 = require("./resource");
const resource_7 = require("./resource");
const resource_8 = require("./resource");
const resource_9 = require("./resource");
const resource_10 = require("./resource");
const debug = debug_1.default('beekeeper:sdk');
const userAgentHeaderKey = 'User-Agent';
// Beekeeper SDK version
exports.version = '0.1.0';
/**
 * Events to listen for on realtime
 */
const listenerKeys = [`${realtime_1.EventTypes.MESSAGE}:${realtime_1.EventActions.CREATE}`];
class BeekeeperSDKException extends Error {
}
exports.BeekeeperSDKException = BeekeeperSDKException;
/**
 * An implementation of the SDK interface
 * @implements SDK
 */
class SDKImpl extends events_1.EventEmitter {
    // tslint:enable:variable-name
    constructor(credentials, options = {}) {
        super();
        this._basePath = '';
        this._config = null;
        // Accessible for testing
        this._realtime = null;
        // Sets prefix path for all requests
        this._basePath = credentials.tenantURL;
        this._headers = this.generateHeaders(credentials, options);
        // Create private and public resources
        this._ClientConfig = new resource_2.ClientConfigResourceImpl(this._basePath, this._headers);
        this.Auth = new resource_1.AuthenticationResourceImpl(this._basePath, this._headers);
        this.Messages = new resource_7.MessageResourceImpl(this._basePath, this._headers);
        this.Profiles = new resource_8.ProfileResourceImpl(this._basePath, this._headers);
        this.Posts = new resource_4.PostResourceImpl(this._basePath, this._headers);
        this.Streams = new resource_9.StreamResourceImpl(this._basePath, this._headers);
        this.Extensions = new resource_10.ExtensionResourceImpl(this._basePath, this._headers);
        this.Conversations = new resource_3.ConversationResourceImpl(this._basePath, this._headers);
        this.Files = new resource_2.FileResourceImpl(this._basePath, this._headers);
        this.Shifts = new resource_5.ShiftResourceImpl(this._basePath, this._headers);
        this.Artifacts = new resource_6.ArtifactResourceImpl(this._basePath, this._headers);
        if (options.realtime) {
            this.enableRealtime();
        }
        debug(`Created new SDK instance with realtime option: ${options.realtime}`);
    }
    async init() {
        // Request client config
        this._config = await this._ClientConfig.get();
    }
    generateHeaders(credentials, options) {
        const authenticationHeader = credentials.token
            ? new header_1.AuthorizationHeader(credentials.token)
            : new header_1.WebAuthorizationHeader(credentials.csrfToken);
        const userAgentHeader = new header_1.Header(userAgentHeaderKey, `BeekeeperSDK-JS/${exports.version}`);
        const optionsHeaders = options.headers || [];
        const additionalHeaders = Object.entries(optionsHeaders).map(([key, value]) => new header_1.Header(key, value));
        return [authenticationHeader, userAgentHeader, ...additionalHeaders];
    }
    /** Methods */
    async getMe() {
        if (!this._config) {
            await this.init();
        }
        if (this._config) {
            return this._config.user;
        }
        else {
            throw new BeekeeperSDKException('Initialization failed: No config present');
        }
    }
    async enableRealtime(force = false) {
        if (!this._realtime || force) {
            try {
                if (!this._config) {
                    await this.init();
                }
                let config;
                if (this._config) {
                    config = this._config;
                }
                else {
                    throw new BeekeeperSDKException('Initialization failed: No config present');
                }
                const params = {
                    subscribeKey: config.tenant.integrations.pubnub.subscribe_key,
                    cipherKey: config.enc_channel.key,
                };
                const realtime = new realtime_1.Realtime(params);
                realtime.subscribe(config.enc_channel.channel);
                // Set up listeners for all specified keys
                listenerKeys.forEach((key) => {
                    // Pipe events on the SDK instance
                    realtime.on(key, (...args) => this.emit.apply(this, [key, ...args]));
                });
                this._realtime = realtime;
            }
            catch (error) {
                console.error(`Enable realtime failed: ${error.message}`, error);
                return false;
            }
            debug('Enabled realtime for SDK');
        }
        return true;
    }
}
exports.SDKImpl = SDKImpl;
